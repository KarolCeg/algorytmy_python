class Graf():

    def __init__(self, wierzcholki, krawedzie):

        for wierzcholek in wierzcholki:
            if wierzcholki.count(wierzcholek)>1:
                raise Exception("nieprawidłowe wierzchołki")
        for krawedz in krawedzie:
            if not krawedz[0][0] in wierzcholki or not krawedz[0][1] in wierzcholki:
                raise Exception("nieprawidłowe krawędzie")              
        same_krawedzie = []          
        for krawedz in krawedzie:
            same_krawedzie.append(krawedz[0])
        for sama_krawedz in same_krawedzie:
            if same_krawedzie.count(sama_krawedz)>1:
                raise Exception("nieprawidłowe krawedzie")
            
        self.wierzcholki = list(wierzcholki)
        self.krawedzie = list(krawedzie)

    def initialize(self, z):
        g_pom = {}
        for elem in self.wierzcholki:
            g_pom[elem] = float('inf')
        g_pom[z] = 0
        return g_pom

    #def extract(self, Q):

    #def neighbors(self, w):
    def neighbors(self,wierzcholek): # zwraca same wierzcholki
        sas = {}#sasiedzi
        sas[wierzcholek] = []
        for krawedz in self.krawedzie:
            if(wierzcholek == krawedz[0]):
                self.sasiedzi.append(krawedz[1])
            if(wierzcholek == krawedz[1]):
                self.sasiedzi.append(krawedz[0])
        print(self.sasiedzi) #return self.sasiedzi

    #def relax(self, ):


    


if __name__ == "__main__":
    g_wierzcholki = ['S', 'X', 'U', 'Y', 'V']
    g_krawedzie =[ (('S','U'),10),(('S','X'),5),(('X','V'),9),(('X', 'Y'),2),(('X', 'U'),3),(('U', 'V'),1),(('U', 'X'),2),(('Y', 'V'),6), (('V', 'Y'), 4)]

    g = Graf(g_wierzcholki, g_krawedzie)
    print(g.initialize('S'))

    
