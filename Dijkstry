class Graf():

    def __init__(self, wierzcholki, krawedzie):

        for wierzcholek in wierzcholki:
            if wierzcholki.count(wierzcholek)>1:
                raise Exception("nieprawidłowe wierzchołki")
        for krawedz in krawedzie:
            if not krawedz[0][0] in wierzcholki or not krawedz[0][1] in wierzcholki:
                raise Exception("nieprawidłowe krawędzie")              
        same_krawedzie = []          
        for krawedz in krawedzie:
            same_krawedzie.append(krawedz[0])
        for sama_krawedz in same_krawedzie:
            if same_krawedzie.count(sama_krawedz)>1:
                raise Exception("nieprawidłowe krawedzie")
            
        self.wierzcholki = list(wierzcholki)
        self.krawedzie = list(krawedzie)

    def initialize(self, zrodlo):
        g_pom = {}
        for elem in self.wierzcholki:
            g_pom[elem] = float('inf')
        g_pom[zrodlo] = 0
        return g_pom

    def extract(self,graf, Q):
        min_val = float('inf')
        wierzch = -1
        for wierzcholek in graf:
            if wierzcholek in Q:
                if graf[wierzcholek] < min_val:
                    min_val = graf[wierzcholek]
                    wierzch = wierzcholek
        return wierzch # wierzcholek z najmniejszą wartoscia
                 

    def neighbors(self, wierzcholek): # zwraca same wierzcholki
        sasiedzi = {}#sasiedzi
        sasiedzi[wierzcholek] = []
        for krawedz in self.krawedzie:
            if(wierzcholek == krawedz[0][0]):
                sasiedzi[wierzcholek].append((krawedz[0][1],krawedz[1]))     
        return sasiedzi 

    def relax(self,u,v,wartosc,graf):
        if graf[v] > graf[u] + wartosc:
            graf[v] = graf[u] + wartosc
        return graf

    def dijkstra(self, zrodlo):
        graf = self.initialize(zrodlo)
        S = []
        Q = self.wierzcholki
        T = {}

        while Q != []:
            U = {v: graf[v] for v in self.wierzcholki}
            u = self.extract(U,Q)
            T = self.neighbors(u)
            S.append(u)
            Q.remove(u)
            for v,wartosc in T[u]:
                graf = self.relax(u,v,wartosc,graf)
                
        return graf

if __name__ == "__main__":
    g_wierzcholki = ['S', 'X', 'U', 'Y', 'V']
    g_krawedzie =[ (('S','U'),10),(('S','X'),5),(('X','V'),9),(('X', 'Y'),2),(('X', 'U'),3),(('U', 'V'),1),(('U', 'X'),2),(('Y', 'V'),6), (('V', 'Y'), 4)]

    g = Graf(g_wierzcholki, g_krawedzie)
    print(g.dijkstra('S'))

    
