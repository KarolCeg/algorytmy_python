class Graf():

    def __init__(self, wierzcholki, krawedzie):

        for wierzcholek in wierzcholki:
            if wierzcholki.count(wierzcholek)>1:
                raise Exception("nieprawidłowe wierzchołki")
        for krawedz in krawedzie:
            if not krawedz[0][0] in wierzcholki or not krawedz[0][1] in wierzcholki:
                raise Exception("nieprawidłowe krawędzie")              
        same_krawedzie = []          
        for krawedz in krawedzie:
            same_krawedzie.append(krawedz[0])
        for sama_krawedz in same_krawedzie:
            if same_krawedzie.count(sama_krawedz)>1:
                raise Exception("nieprawidłowe krawedzie")
            
        self.wierzcholki = list(wierzcholki)
        self.krawedzie = list(krawedzie)

    def initialize(self, G , z):

    def extract(self, Q):

    def neighbors(self, w):

    def relax(self, ):


    


if __name__ == "__main__":
    g_wierzcholki = ["A", "B", "C", "D", "E", "F", "G", "H" , "I" ]
    g_krawedzie =[ (("A","B"),4),(("C","F"),4),(("I","G"),6),(("H","I"),7),(("C","D"),7),(("A","H"),8),(("B","C"),8),(("D","E"),9), (("H","G"), 1), (("G","F"),2), (("I","C"),2), (("E","F"),10),(("B","H"),11),(("D","F"),14) ]

    g = Graf(g_wierzcholki, g_krawedzie)
    print(g.Kruskal(g_krawedzie))

    
